import React, { useState, useRef, useEffect } from 'react';
import recruitmentService  from '../../services/oganations/recruitmentService.js';
import { 
  Calendar, Users, MapPin, Clock, DollarSign, Briefcase, Star, Copy, Download, Edit,
  Heart, Globe, Award, Coffee, Zap, Target, BookOpen, Camera, Music, Utensils,
  Save, X, CheckCircle, Loader2, Filter, Search, Eye
} from 'lucide-react';

import { useSearchParams } from "react-router-dom";

export default function VolunteerRecruitmentPlatform() {
    const [searchParams] = useSearchParams();
  const eventId = searchParams.get('eventId');
  const type = searchParams.get('type');
  const [activeTab, setActiveTab] = useState('create');
  const [isGenerating, setIsGenerating] = useState(true);
  const [formData, setFormData] = useState({
    // Th√¥ng tin c∆° b·∫£n
    organizationName: '', // t√™n t·ªï ch·ª©c
    activityTitle: '', // ti√™u ƒë·ªÅ ho·∫°t ƒë·ªông
    activityType: 'volunteer', // volunteer, collaborator
    profitType: 'nonprofit', // nonprofit, profit
    category: 'community', // lƒ©nh v·ª±c ho·∫°t ƒë·ªông
    
    // Th√¥ng tin chi ti·∫øt
    skillRequired: [], // c√°c skill y√™u c·∫ßu
    description: '', // th√¥ng tin m√¥ t·∫£
    volunteerRequired: '', // y√™u c·∫ßu ·ª©ng vi√™n
    interest: '', // m√¥ t·∫£ v·ªÅ quy·ªÅn l·ª£i
    local: '', // v·ªã tr√≠ di·ªÖn ra s·ª± ki·ªán
    timeStart: '', // th·ªùi gian b·∫Øt ƒë·∫ßu - k·∫øt th√∫c
    timeEnd: '', 
    deadline: '', // h·∫°n ·ª©ng tuy·ªÉn - d√πng cho t·∫°o b√†i ƒëƒÉng fb
    
    // Th√¥ng tin b·ªï sung
    benefits: [],
    benefitsDescription: '',
    requirements: [],
    requirements_description: '',
    contactInfo: '',
    isRemote: false,
    compensation: '',
    commitment: 'flexible' // flexible, part-time, full-time
  });

  const [quillLoaded, setQuillLoaded] = useState(false);
  const [newRequirement ,setNewRequirement] = useState('');
  const quillRef = useRef(null);
  const editorRef = useRef(null);

  // Categories for activities
  const categories = [
    { value: 'community', label: 'üèòÔ∏è C·ªông ƒë·ªìng', icon: Users },
    { value: 'environment', label: 'üå± M√¥i tr∆∞·ªùng', icon: Globe },
    { value: 'education', label: 'üìö Gi√°o d·ª•c', icon: BookOpen },
    { value: 'healthcare', label: 'üè• Y t·∫ø', icon: Heart },
    { value: 'culture', label: 'üé≠ VƒÉn h√≥a', icon: Music },
    { value: 'sports', label: '‚öΩ Th·ªÉ thao', icon: Award },
    { value: 'technology', label: 'üíª C√¥ng ngh·ªá', icon: Zap },
    { value: 'media', label: 'üì∏ Truy·ªÅn th√¥ng', icon: Camera },
    { value: 'food', label: 'üçΩÔ∏è ·∫®m th·ª±c', icon: Utensils },
    { value: 'other', label: 'üìã Kh√°c', icon: Target }
  ];


  useEffect(()=> {
    const loaded = async ()=> {
        try {
            const res = await recruitmentService.getRecruitmentsById(eventId);
            if(res.success) {
                setFormData(res.data);
                quillRef.current.clipboard.dangerouslyPasteHTML(`<div>${formData.description}</div>`)
            }else {
                alert("l·ªói")
            }
        }catch(err){
            console.log(err.message);
        }
    }
    if(type === 'edit') {
        loaded();
    }
  }, []);

  // Load Quill.js
  useEffect(() => {
    const loadQuill = async () => {
      if (window.Quill) {
        initializeEditor();
        return;
      }

      const quillCss = document.createElement('link');
      quillCss.rel = 'stylesheet';
      quillCss.href = 'https://cdnjs.cloudflare.com/ajax/libs/quill/1.3.7/quill.snow.min.css';
      document.head.appendChild(quillCss);

      const quillScript = document.createElement('script');
      quillScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/quill/1.3.7/quill.min.js';
      quillScript.onload = () => {
        setQuillLoaded(true);
        initializeEditor();
      };
      document.body.appendChild(quillScript);
    };

    loadQuill();
  }, []);


  const initializeEditor = () => {
    if (editorRef.current && window.Quill && !quillRef.current) {
      const toolbarOptions = [
        ['bold', 'italic', 'underline'],
        [{ 'list': 'ordered'}, { 'list': 'bullet' }],
        [{ 'header': [1, 2, 3, false] }],
        ['link'],
        ['clean']
      ];

      quillRef.current = new window.Quill(editorRef.current, {
        theme: 'snow',
        modules: {
          toolbar: toolbarOptions
        },
        placeholder: 'M√¥ t·∫£ chi ti·∫øt v·ªÅ ho·∫°t ƒë·ªông, nhi·ªám v·ª• v√† m·ª•c ti√™u...'
      });

      quillRef.current.on('text-change', () => {
        const html = quillRef.current.root.innerHTML;
        const text = quillRef.current.getText();
        setFormData(prev => ({
          ...prev,
          description: text.trim() === '' ? '' : html
        }));
      });
    }
  };

  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));
    setIsGenerating(true);
  };

    const addRequirement = () => {
        const req = newRequirement.split(',');
        setFormData(prev => ({
            ...prev, 
            requirements: req
        }));
        setNewRequirement('')
    };

    const removeRequirement = (index) => {
        setFormData(prev => ({
        ...prev,
        requirements: prev.requirements.filter((_, i) => i !== index)
        }));
    };

    const saveDraft = ()=> {
       
    }
    const publish = () => {
        recruitmentService.createRecruitment(formData);
    }
    const resetForm = ()=> {
        setFormData({
            // Th√¥ng tin c∆° b·∫£n
            organizationName: '', // t√™n t·ªï ch·ª©c
            activityTitle: '', // ti√™u ƒë·ªÅ ho·∫°t ƒë·ªông
            activityType: 'volunteer', // volunteer, collaborator
            profitType: 'nonprofit', // nonprofit, profit
            category: 'community', // lƒ©nh v·ª±c ho·∫°t ƒë·ªông
            
            // Th√¥ng tin chi ti·∫øt
            skillRequired: [], // c√°c skill y√™u c·∫ßu
            description: '', // th√¥ng tin m√¥ t·∫£
            volunteerRequired: '', // y√™u c·∫ßu ·ª©ng vi√™n
            interest: '', // m√¥ t·∫£ v·ªÅ quy·ªÅn l·ª£i
            local: '', // v·ªã tr√≠ di·ªÖn ra s·ª± ki·ªán
            timeStart: '', // th·ªùi gian b·∫Øt ƒë·∫ßu - k·∫øt th√∫c
            timeEnd: '', 
            deadline: '', // h·∫°n ·ª©ng tuy·ªÉn - d√πng cho t·∫°o b√†i ƒëƒÉng fb
            
            // Th√¥ng tin b·ªï sung
            benefits: [],
            benefitsDescription: '',
            requirements: [],
            requirements_description: '',
            contactInfo: '',
            isRemote: false,
            compensation: '',
            commitment: 'flexible' // flexible, part-time, full-time
        });
        setIsGenerating(false);
    }
    const generatePreviewHtml = ()=> {}
  return (
    <div className="min-h-screen bg-green-50 rounded-lg p-5 flex flex-col gap-3">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <div className="bg-white/80 backdrop-blur-sm rounded-2xl p-6 text-center hover:border border-gray-200 transition-all duration-200 delay-200">
            <Heart size={48} className="mx-auto text-red-500 mb-4" />
            <h3 className="text-xl font-bold text-gray-800 mb-2">T√¨nh Nguy·ªán</h3>
            <p className="text-gray-600">K·∫øt n·ªëi v·ªõi c√°c ho·∫°t ƒë·ªông phi l·ª£i nhu·∫≠n √Ω nghƒ©a</p>
          </div>
          <div className="bg-white/80 backdrop-blur-sm rounded-2xl p-6 text-center hover:border border-gray-200 transition-all duration-200 delay-200">
            <Briefcase size={48} className="mx-auto text-blue-600 mb-4" />
            <h3 className="text-xl font-bold text-gray-800 mb-2">C·ªông T√°c</h3>
            <p className="text-gray-600">T√¨m c∆° h·ªôi c·ªông t√°c v·ªõi th√π lao h·∫•p d·∫´n</p>
          </div>
          <div className="bg-white/80 backdrop-blur-sm rounded-2xl p-6 text-center hover:border border-gray-200 transition-all duration-200 delay-200">
            <Users size={48} className="mx-auto text-green-600 mb-4" />
            <h3 className="text-xl font-bold text-gray-800 mb-2">C·ªông ƒê·ªìng</h3>
            <p className="text-gray-600">X√¢y d·ª±ng m·∫°ng l∆∞·ªõi v√† k·∫øt n·ªëi c√≥ √Ω nghƒ©a</p>
          </div>
          <div className="bg-white/80 backdrop-blur-sm rounded-2xl p-6 text-center hover:border border-gray-200 transition-all duration-200 delay-200">
            <Award size={48} className="mx-auto text-purple-600 mb-4" />
            <h3 className="text-xl font-bold text-gray-800 mb-2">Ph√°t Tri·ªÉn</h3>
            <p className="text-gray-600">N√¢ng cao k·ªπ nƒÉng v√† t√≠ch l≈©y kinh nghi·ªám</p>
          </div>
        </div>
        <div className='bg-white rounded-lg p-4 w-full'>
            <h1 className='flex items-center gap-3 text-xl font-semibold mb-5'><Edit size={30} className='text-blue-600' /> Chi ti·∫øt th√¥ng tin</h1>
            <div className='w-full space-y-4 border-b-2 pb-4 border-gray-500'>
                <div className='flex gap-5 w-full'>
                    <div className='w-1/2 space-y-2'>
                        <label className="block text-sm font-semibold text-gray-700">Lo·∫°i Ho·∫°t ƒê·ªông</label>
                        <select name="activityType" value={formData.activityType} onChange={handleInputChange} className="w-full p-3 border-2 border-gray-200 rounded-lg focus:border-blue-500 focus:outline-none transition-colors">
                            <option value="collaborator">C·ªông t√°c vi√™n</option>
                            <option value="volunteer">T√¨nh nguy·ªán vi√™n</option>
                        </select>
                    </div>
                    <div className='w-1/2 space-y-2'>
                        <label className="block text-sm font-semibold text-gray-700">T√≠nh Ch·∫•t</label>
                        <select
                            name="profitType"
                            value={formData.profitType}
                            onChange={handleInputChange}
                            className="w-full p-3 border-2 border-gray-200 rounded-lg focus:border-blue-500 focus:outline-none transition-colors"
                        >
                            <option value="nonprofit">ü§ù Phi l·ª£i nhu·∫≠n</option>
                            <option value="profit">üí∞ L·ª£i nhu·∫≠n</option>
                        </select>
                    </div>
                </div>
                <div className='space-y-2'>
                    <label htmlFor="organizationName" className='block text-sm font-semibold text-gray-700'>T√™n t·ªï ch·ª©c</label>
                    <input type="text" value={formData.organizationName} name="organizationName" onChange={handleInputChange} id="organizationName" placeholder='Nh·∫≠p t√™n t·ªï ch·ª©c' className='w-full border-2 px-3 py-2 border-gray-200 rounded-lg  focus:border-blue-500 focus:outline-none'/>
                </div>
                <div className='space-y-2'>
                    <label htmlFor="activityTitle" className='block text-sm font-semibold text-gray-700'>T√™n ho·∫°t ƒë·ªông</label>
                    <input type="text" value={formData.activityTitle} name="activityTitle" onChange={handleInputChange} id="activityTitle" placeholder='Nh·∫≠p t√™n ho·∫°t ƒë·ªông' className='w-full border-2 px-3 py-2 border-gray-200 rounded-lg  focus:border-blue-500 focus:outline-none'/>
                </div>
                <div className='flex gap-5'>
                    <div className='w-1/2 space-y-2'>
                        <label className="block text-sm font-semibold text-gray-700">Lƒ©nh v·ª±c</label>
                        <select name="category" value={formData.category} onChange={handleInputChange} className="w-full p-3 border-2 border-gray-200 rounded-lg focus:border-blue-500 focus:outline-none transition-colors">
                            {categories.map((item, idx)=> (
                                <option key={idx} className='' value={item.value}>{item.label}</option>
                            ))}
                        </select>
                    </div>
                    <div className='w-1/2 space-y-2'>
                        <label htmlFor='local' className="block text-sm font-semibold text-gray-700">ƒê·ªãa ƒëi·ªÉm</label>
                        <input type="text" name="local" onChange={handleInputChange} value={formData.local} id="local" placeholder='Nh·∫≠p ƒë·ªãa ch·ªâ di·ªÖn ra ho·∫°t ƒë·ªông' className='w-full border-2 px-3 py-2 border-gray-200 rounded-lg  focus:border-blue-500 focus:outline-none'/>
                    </div>
                </div>
                <div className="flex items-center gap-3">
                    <input
                    type="checkbox"
                    name="isRemote"
                    checked={formData.isRemote}
                    onChange={handleInputChange}
                    className="w-5 h-5 text-blue-600 rounded focus:ring-blue-500"
                    />
                    <label className="text-sm font-semibold text-gray-700">
                    üíª C√≥ th·ªÉ th·ª±c hi·ªán t·ª´ xa
                    </label>
                </div>
                <div className="grid md:grid-cols-3 gap-4">
                    <div className="space-y-2">
                    <label className="block text-sm font-semibold text-gray-700">Ng√†y B·∫Øt ƒê·∫ßu</label>
                    <input
                        type="date"
                        name="timeStart"
                        value={formData.timeStart}
                        onChange={handleInputChange}
                        className="w-full p-3 border-2 border-gray-200 rounded-lg focus:border-blue-500 focus:outline-none transition-colors"
                    />
                    </div>
                    <div className="space-y-2">
                    <label className="block text-sm font-semibold text-gray-700">Ng√†y K·∫øt Th√∫c</label>
                    <input
                        type="date"
                        name="timeEnd"
                        value={formData.timeEnd}
                        onChange={handleInputChange}
                        className="w-full p-3 border-2 border-gray-200 rounded-lg focus:border-blue-500 focus:outline-none transition-colors"
                    />
                    </div>
                    <div className="space-y-2">
                    <label className="block text-sm font-semibold text-gray-700">H·∫°n ƒêƒÉng K√Ω</label>
                    <input
                        type="date"
                        name="deadline"
                        value={formData.deadline}
                        onChange={handleInputChange}
                        className="w-full p-3 border-2 border-gray-200 rounded-lg focus:border-blue-500 focus:outline-none transition-colors"
                    />
                    </div>
                </div>

                {/* Volunteer Required & Commitment */}
                <div className="grid md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                    <label className="block text-sm font-semibold text-gray-700">S·ªë L∆∞·ª£ng C·∫ßn Tuy·ªÉn</label>
                    <input
                        type="text"
                        name="volunteerRequired"
                        value={formData.volunteerRequired}
                        onChange={handleInputChange}
                        className="w-full p-3 border-2 border-gray-200 rounded-lg focus:border-blue-500 focus:outline-none transition-colors"
                        placeholder="VD: 10-15 ng∆∞·ªùi"
                    />
                    </div>
                    <div className="space-y-2">
                    <label className="block text-sm font-semibold text-gray-700">M·ª©c ƒê·ªô Cam K·∫øt</label>
                    <select
                        name="commitment"
                        value={formData.commitment}
                        onChange={handleInputChange}
                        className="w-full p-3 border-2 border-gray-200 rounded-lg focus:border-blue-500 focus:outline-none transition-colors"
                    >
                        <option value="flexible">‚è∞ Linh ho·∫°t</option>
                        <option value="part-time">üìÖ B√°n th·ªùi gian</option>
                        <option value="full-time">üïí To√†n th·ªùi gian</option>
                    </select>
                    </div>
                </div>

                {/* Compensation (for collaborators) */}
                {(formData.profitType !== 'nonprofit' || formData.activityType ) === 'collaborator' && (
                    <div className="space-y-2">
                    <label className="block text-sm font-semibold text-gray-700 flex items-center gap-1">
                        <DollarSign size={16} className="text-green-500" />
                        H·ªó Tr·ª£ / Th√π Lao
                    </label>
                    <input
                        type="text"
                        name="compensation"
                        value={formData.compensation}
                        onChange={handleInputChange}
                        className="w-full p-3 border-2 border-gray-200 rounded-lg focus:border-blue-500 focus:outline-none transition-colors"
                        placeholder="VD: 500k-1M VNƒê, H·ªó tr·ª£ ƒÉn u·ªëng, Certificate..."
                    />
                    </div>
                )}
                <div className="space-y-2">
                    <label className="block text-sm font-semibold text-gray-700 flex items-center gap-1">
                    <Edit size={16} className="text-purple-500" />
                    M√¥ T·∫£ Chi Ti·∫øt Ho·∫°t ƒê·ªông
                    </label>
                    <div className="border-2 border-gray-200 rounded-lg overflow-hidden focus-within:border-blue-500 transition-colors">
                        <div ref={editorRef} className="min-h-[200px]"></div>
                    </div>
                </div>   
                <div>
                    <div className="space-y-4">
                        <label className="block text-sm font-semibold text-gray-700">K·ªπ nƒÉng c·∫ßn thi·∫øt</label>

                        <div className="flex gap-3 items-start">
                        <input
                            type="text"
                            value={newRequirement}
                            onChange={(e) => setNewRequirement(e.target.value)}
                            onKeyPress={(e) => e.key === 'Enter' && addRequirement()}
                            className="flex-1 min-w-0 p-3 border-2 border-gray-200 rounded-lg focus:border-blue-500 focus:outline-none transition-colors"
                            placeholder="Nh·∫≠p c√°c kƒ© nƒÉng c·∫ßn thi·∫øt (c√°ch nhau b·∫±ng d·∫•u ',')"
                            aria-label="K·ªπ nƒÉng c·∫ßn thi·∫øt"
                        />
                        <button
                            type="button"
                            onClick={addRequirement}
                            className="px-5 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors font-semibold"
                            aria-label="Th√™m k·ªπ nƒÉng"
                        >
                            Th√™m
                        </button>
                        </div>

                        <div className="mt-2">
                        <div className="text-xs text-gray-500 mb-2">C√°c k·ªπ nƒÉng ƒë√£ th√™m</div>
                        <div
                            className="max-h-32 overflow-y-auto flex flex-wrap gap-2 py-2"
                            role="list"
                            aria-label="Danh s√°ch k·ªπ nƒÉng"
                        >
                            {formData.requirements.map((req, index) => (
                            <div
                                key={index}
                                className="inline-flex items-center gap-2 px-3 py-1 bg-blue-50 border border-blue-100 rounded-full text-sm max-w-full"
                                role="listitem"
                            >
                                <span className="truncate">{req}</span>
                                <button
                                onClick={() => removeRequirement(index)}
                                className="flex items-center justify-center p-1 rounded hover:bg-red-50"
                                aria-label={`X√≥a ${req}`}
                                title={`X√≥a ${req}`}
                                >
                                <X size={16} />
                                </button>
                            </div>
                            ))}
                            {formData.requirements.length === 0 && (
                            <div className="text-sm text-gray-400">Ch∆∞a c√≥ k·ªπ nƒÉng n√†o ‚Äî h√£y th√™m v√†o.</div>
                            )}
                        </div>
                        </div>

                        <div className="space-y-2">
                        <label className="block text-sm font-semibold text-gray-700 flex items-center gap-2">
                            <Edit size={16} className="text-purple-500" />
                            M√¥ t·∫£ y√™u c·∫ßu ·ª©ng vi√™n
                        </label>
                        <textarea
                            name="requirements_description"
                            value={formData.requirements_description}
                            onChange={handleInputChange}
                            placeholder="M√¥ t·∫£ chi ti·∫øt c√°c y√™u c·∫ßu (v√≠ d·ª•: kinh nghi·ªám, b·∫±ng c·∫•p, k·ªπ nƒÉng m·ªÅm‚Ä¶) "
                            className="w-full min-h-[120px] p-3 border-2 border-gray-200 rounded-lg resize-vertical focus:border-blue-500 focus:outline-none transition-colors"
                            aria-label="M√¥ t·∫£ y√™u c·∫ßu ·ª©ng vi√™n"
                        />
                        </div>
                    </div>

                    <div className="mt-6 space-y-2">
                        <label className="block text-sm font-semibold text-gray-700 flex items-center gap-2">
                            <Edit size={16} className="text-purple-500" />
                            M√¥ t·∫£ quy·ªÅn l·ª£i & l·ª£i √≠ch ·ª©ng vi√™n s·∫Ω nh·∫≠n ƒë∆∞·ª£c
                        </label>
                        <textarea
                            name="benefitsDescription"
                            value={formData.benefitsDescription}
                            onChange={handleInputChange}
                            placeholder="Li·ªát k√™ quy·ªÅn l·ª£i: l∆∞∆°ng, th∆∞·ªüng, b·∫£o hi·ªÉm, m√¥i tr∆∞·ªùng l√†m vi·ªác, c∆° h·ªôi thƒÉng ti·∫øn..."
                            className="w-full min-h-[100px] p-3 border-2 border-gray-200 rounded-lg resize-vertical focus:border-blue-500 focus:outline-none transition-colors"
                            aria-label="M√¥ t·∫£ quy·ªÅn l·ª£i"
                        />
                    </div>

                    <div className="mt-6 space-y-2">
                        <label className="block text-sm font-semibold text-gray-700 flex items-center gap-2">
                            <Edit size={16} className="text-purple-500" />
                            Th√¥ng tin li√™n h·ªá
                        </label>
                        <div className="flex gap-3">
                            <textarea
                                name="contactInfo"
                                value={formData.contactInfo}
                                onChange={handleInputChange}
                                rows={3}
                                className="w-full p-3 border-2 border-gray-200 rounded-lg focus:border-blue-500 focus:outline-none transition-colors resize-none"
                                placeholder="Email: contact@org.com&#10;Phone: 0123456789&#10;Facebook: fb.com/orgname"
                            />
                        </div>
                    </div>
                </div>         
            </div>
            <div className="flex flex-wrap gap-3 mt-8 pt-6 border-t border-gray-200">
                <button 
                    onClick={saveDraft} 
                    className="px-6 py-3 bg-yellow-500 text-white rounded-lg hover:bg-yellow-600 transition flex items-center gap-2"
                >
                <Save size={16} />
                üíæ L∆∞u nh√°p
                </button>
                
                <button 
                onClick={generatePreviewHtml} 
                disabled={isGenerating}
                className="px-6 py-3 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition flex items-center gap-2 disabled:opacity-50"
                >
                {isGenerating ? <Loader2 size={16} className="animate-spin" /> : <Eye size={16} />}
                üîç Xem tr∆∞·ªõc
                </button>
                
                <button 
                onClick={publish} 
                className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition flex items-center gap-2 ml-auto"
                >
                <CheckCircle size={16} />
                    {type === 'edit' ? "C·∫≠p nh·∫≠t" : "üöÄ ƒêƒÉng tuy·ªÉn"}
                </button>
                
                <button 
                onClick={resetForm} 
                className="px-6 py-3 bg-red-100 text-red-700 rounded-lg hover:bg-red-200 transition flex items-center gap-2"
                >
                <X size={16} />
                üßπ Reset
                </button>
            </div>
        </div>
    </div>
  );
}